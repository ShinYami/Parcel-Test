
/* GRID & STRUCTURE
---------------------------------------------------------------------------------------------------- */

/*
    ┌─────────────────────────────────────────────────────┐
    |                                                     |
    |   [m-]  : Mobile           (767px >=)               |
    |   [t-]  : Tablet           (767px < && < 1112px)    |
    |   [tp-] : Tablet portait   (767px < && <= 960px)    |
    |   [s-]  : Small Desktop    (1112px <= && < 1200px)  |
    |   [d-]  : Desktop                                   |
    |   [w-]  : Wide Desktop                              |
    |                                                     |
    └─────────────────────────────────────────────────────┘
*/




/* Variables
--------------------------------------------------------- */

// Mobile
$m-col-number: 4;
$m-gut-number: $m-col-number - 1;

$m-margin: 9.33vw;
// $m-margin-raw: str-replace($m-margin, 'calc', '');
$m-col-width: 19.6%;
$m-gut-width: (100% - $m-col-number * $m-col-width) / $m-gut-number;


// Tablet Portait
$tp-col-number: 12;
$tp-gut-number: $tp-col-number - 1;

$tp-margin: 5.85vw;
$tp-col-width: 5.61%;
$tp-gut-width: (100% - $tp-col-number * $tp-col-width) / $tp-gut-number;


// Desktop (Small & Regular)
$d-col-number: 12;
$d-gut-number: $d-col-number - 1;

$d-margin: 5.55vw;
$d-col-width: 5.85%;
$d-gut-width: (100% - $d-col-number * $d-col-width) / $d-gut-number;


// Desktop (Wide)
$grid-max-width: 1280px;
$grid-max-boundaries: round($grid-max-width / (100 - (strip-units($d-margin) * 2)) * 100);
$grid-max-width-boundaries: calc(#{$grid-max-boundaries} - (100vw - 100%));

$w-margin: calc((100vw - #{$grid-max-width}) / 2);
// $w-margin-raw: str-replace($w-margin, 'calc', '');
$w-padding: calc(((#{$grid-max-boundaries} - (100vw - 100%)) - #{$grid-max-width}) / 2);
$w-padding-accurate: calc(((#{$grid-max-boundaries} - (100vw - 100%)) - #{$grid-max-width} + var(--sbW, 0)) / 2);


// Specific
$margin-fixed   :  8rem;
$m-margin-fixed : .8rem;




/* Grid Containers & Rows
--------------------------------------------------------- */

.ctn {
    padding-right: $m-margin;
    padding-left: $m-margin;


    // MQ
    @include minw($bp-mobile) {
        padding-right: $tp-margin;
        padding-left: $tp-margin;
    }

    @include minw($bp-tabletP) {
        padding-right: $d-margin;
        padding-left: $d-margin;
    }

    @include minw($grid-max-boundaries) {
        padding-right: $w-margin;
        padding-left: $w-margin;

        &--bounds {
            width: $grid-max-width-boundaries;
            margin-right: auto;
            margin-left: auto;
            padding-right: $w-padding-accurate;
            padding-left: $w-padding-accurate;

            .ie & {
                padding-right: $w-padding;
                padding-left: $w-padding;
            }
        }
    }
}

.d-ctn-only {
    @include maxw($bp-tabletP) {
        padding-right: initial;
        padding-left: initial;
    }
}

.tp-ctn-only {
    @include minw($bp-tabletP) {
        padding-right: initial;
        padding-left: initial;
    }
}

.m-ctn-only {
    @include minw($bp-mobile) {
        padding-right: initial;
        padding-left: initial;
    }
}

.s-no-ctn {
    @include maxw($bp-xxx-small) {
        padding-right: initial;
        padding-left: initial;
    }
}

.tp-no-ctn {
    @include maxw($bp-tabletP) {
        padding-right: initial;
        padding-left: initial;
    }
}

.m-no-ctn {
    @include maxw($bp-mobile) {
        padding-right: initial;
        padding-left: initial;
    }
}

@include maxw($bp-mobile) {
    [class*='m-col-']:not(:last-child):not(.m-col-free):not(.cf) {
        margin-right: $m-gut-width;
    }
}

@include minw-maxw($bp-mobile, $bp-tabletP) {
    [class*='tp-col-']:not(:last-child):not(.tp-col-free):not(.cf) {
        margin-right: $tp-gut-width;
    }
}

@include minw($bp-tabletP) {
    [class*='col-']:not(:last-child):not(.col-free):not(.cf) {
        margin-right: $d-gut-width;
    }
}

/* Grid construction
--------------------------------------------------------- */

@mixin buildGrid($grid-margin, $col-number, $col-width, $gut-width, $min-width, $max-width: null, $prefix: '') {
    @for $i from $col-number to 0 {
        $cw: $col-width;
        $gw: $gut-width;
        $width: colw($i, $col-width, $gut-width);

        @include width-range($min-width, $max-width) {
            %#{$prefix}col-#{$i} {
                width: $width;

                // Sub-grids
                @for $j from $i to 0 {
                    $subgut: gutw(($j, $i, $col-number), $col-width, $gut-width);
                    $subcol: (100% - ($i - 1) * $subgut) / $i;
                    $subwidth : colw(($j, $i, $col-number), $col-width, $gut-width);

                    .#{$prefix}col-#{$j} { width: $subwidth; }

                    // Margins
                    .#{$prefix}mr-#{$j}  { margin-right: #{$subcol * $j + ($j - 1) * $subgut}; }
                    .#{$prefix}mrg-#{$j} { margin-right: #{$subcol * $j + $j * $subgut}; }
                    .#{$prefix}ml-#{$j}  { margin-left: #{$subcol * $j + ($j - 1) * $subgut}; }
                    .#{$prefix}mlg-#{$j} { margin-left: #{$subcol * $j + $j * $subgut}; }

                    .#{$prefix}prg-#{$j} { padding-right: #{$subcol * $j + $j * $subgut}; }
                    .#{$prefix}plg-#{$j} { padding-left: #{$subcol * $j + $j * $subgut}; }
                }

                [class*='col-']:not(:last-child):not(.cf) {
                    margin-right: $gw * $col-number / $i;
                }
            }

            .#{$prefix}vpspan-#{$i} {
                width: calc(#{$width} + (#{$grid-margin}));
            }

            .#{$prefix}vpspang-#{$i} {
                width: calc(#{$width + $gw} + (#{$grid-margin}));
            }

            .#{$prefix}col-#{$i} {
                @extend %#{$prefix}col-#{$i};
            }

            .#{$prefix}mr-#{$i}  { margin-right: #{$cw * $i + ($i - 1) * $gw}; }
            .#{$prefix}mrg-#{$i} { margin-right: #{$cw * $i + $i * $gw}; }
            .#{$prefix}ml-#{$i}  { margin-left: #{$cw * $i + ($i - 1) * $gw}; }
            .#{$prefix}mlg-#{$i} { margin-left: #{$cw * $i + $i * $gw}; }

            .#{$prefix}prg-#{$i} { padding-right: #{$cw * $i + $i * $gw}; box-sizing: content-box; }
            .#{$prefix}plg-#{$i} { padding-left: #{$cw * $i + $i * $gw}; box-sizing: content-box; }
        }
    }

    @include width-range($min-width, $max-width) {
        .#{$prefix}gut-1 { width: $gut-width; }
        .#{$prefix}col-free { margin-right: 0 !important; }
    }
}


// Mobile
@include buildGrid($m-margin, $m-col-number, $m-col-width, $m-gut-width, null, $bp-mobile, 'm-');

// Tablet Portrait
@include buildGrid($tp-margin, $tp-col-number, $tp-col-width, $tp-gut-width, $bp-mobile, $bp-tabletP, 'tp-');

// Desktop
@include buildGrid(max(#{$d-margin}, #{$w-margin}), $d-col-number, $d-col-width, $d-gut-width, $bp-tabletP);

// Small Desktop
@include buildGrid($d-margin, $d-col-number, $d-col-width, $d-gut-width, $bp-tabletP, $bp-xxx-small, 's-');